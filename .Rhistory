n_indiv <- do_call(rbind, ns)
n_indiv <- n_indiv[n_indiv$experiment == "vuelo solo", ]
# keep groups with at least 5 calls per individual
n_indiv <- n_indiv[n_indiv$group %in% unique(n_indiv$group[n_indiv$selec >= 5]), ]
n_indiv
names(acous_param_l)
sub_acous_param_l <- acous_param_l[names(acous_param_l) %in% unique(n_indiv$group), ]
sub_acous_param_l <- acous_param_l[names(acous_param_l) %in% unique(n_indiv$group)]
length(sub_acous_param_l)
length(acous_param_l)
length(unique(n_indiv$group))
# keep groups with at least 5 calls per individual
n_indiv <- n_indiv[!n_indiv$group %in% unique(n_indiv$group[n_indiv$selec < 5]), ]
length(unique(n_indiv$group))
sub_acous_param_l <- acous_param_l[names(acous_param_l) %in% unique(n_indiv$group)]
length(sub_acous_param_l)
acous_param <- do.call(rbind, sub_acous_param_l)
acous_param
table(acous_param$experiment)
acous_param$experiment <- acous_param$experiment[acous_param$experiment == "vuelo solo", ]
acous_param <- acous_param$experiment[acous_param$experiment == "vuelo solo", ]
acous_param <- do.call(rbind, sub_acous_param_l)
table(acous_param$experiment)
acous_param <- acous_param$experiment[acous_param$experiment == "vuelo solo", ]
acous_param <- acous_param[acous_param$experiment == "vuelo solo", ]
acous_param
nrow(acous_param)
# add 'developer' to packages to be installed from github
x <- c("data.table", "lubridate", "devtools", github = "maRce10/warbleR", "readxl", "ranger", "caret", "e1071", "pbapply", "viridis", "ggplot2", "rlang", "Sim.DiffProc", "soundgen", "brms", "ggrepel", "posterior", "ggridges", "tidybayes", "purrr", bioconductor = "multtest", "metap"#, "markovchain", "igraph", "TraMineR", "spgs", "umap"
)
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
load_packages(x, quite = TRUE)
head(acous_param)
ncol(acous_param)
umap_acous <- umap(acous_param[ , 3:222])
# add 'developer' to packages to be installed from github
x <- c("data.table", "lubridate", "devtools", github = "maRce10/warbleR", "readxl", "ranger", "caret", "e1071", "pbapply", "viridis", "ggplot2", "rlang", "Sim.DiffProc", "soundgen", "brms", "ggrepel", "posterior", "ggridges", "tidybayes", "purrr", bioconductor = "multtest", "umap", "metap"#, "markovchain", "igraph", "TraMineR", "spgs",
)
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
load_packages(x, quite = TRUE)
umap_acous <- umap(acous_param[ , 3:222])
umap_acous$data
umap_acous$layout
str(umap_acous$layout)
str(umap_acous$layout)
# keep groups with at least 5 calls per individual
n_indiv <- n_indiv[!n_indiv$group %in% unique(n_indiv$group[n_indiv$selec < 10]), ]
sub_acous_param_l <- acous_param_l[names(acous_param_l) %in% unique(n_indiv$group)]
acous_param <- do.call(rbind, sub_acous_param_l)
acous_param <- acous_param[acous_param$experiment == "vuelo solo", ]
umap_acous <- umap(acous_param[ , 3:222])
saveRDS(umap_acous, "umap_acoustic_space_all_groups.RDS")
# add 'developer' to packages to be installed from github
x <- c("data.table", "lubridate", "devtools", github = "maRce10/warbleR", "readxl", "ranger", "caret", "e1071", "pbapply", "viridis", "ggplot2", "rlang", "Sim.DiffProc", "soundgen", "brms", "ggrepel", "posterior", "ggridges", "tidybayes", "purrr", bioconductor = "multtest", "umap", github = "maRce10/PhenotypeSpace", "metap"#, "markovchain", "igraph", "TraMineR", "spgs",
)
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
load_packages(x, quite = TRUE)
umap_acous <- readRDS("umap_acoustic_space_all_groups.RDS")
umap_acous$data$group
umap_acous$data
umap_acous$org.data <- acous_param
saveRDS(umap_acous, "umap_acoustic_space_all_groups.RDS")
umap_dat <- cbind(umap_acous$org.data$group, umap_acous$layout)
umap_dat <- cbind(umap_acous$org.data$group, umap_acous$layout)
x <- umap_acous$org.data$group[1]
x
X <- umap_acous$layout[umap_acous$org.data$group == x,]
X
umap_dat <- cbind(group = umap_acous$org.data$group, umap_acous$layout)
umap_dat
umap_dat <- data.frame(group = umap_acous$org.data$group, umap_acous$layout)
umap_dat
umap_dat <- data.frame(group = umap_acous$org.data$group, indiv = umap_acous$org.data$indiv, umap_acous$layout)
X <- umap_dat[umap_dat$group == x,]
X
sp_sim <- space_similarity(X = umap_dat, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap")
sp_sim <- rarefact_space_similarity(X = umap_dat, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10)
sp_sim <- rarefact_space_similarity(X = umap_dat, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 2)
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50)
sp_sim
range(X$X2)
range(X$X1)
X$X1 <-  (X$X1 + abs(X$X1)) / max((X$X1 + abs(X$X1)))
range(X$X1)
sp_sims_l <- pbapply::pblapply(unique(umap_acous$org.data$group), function(x){
X <- umap_dat[umap_dat$group == x,]
# for dimensions to range 0-1
X$X1 <- (X$X1 + abs(X$X1)) / max((X$X1 + abs(X$X1)))
X$X2 <- (X$X2 + abs(X$X2)) / max((X$X2 + abs(X$X2)))
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim$group <- x
return(sp_sim)
})
sp_sims_l <- pbapply::pblapply(unique(umap_dat$group), function(x){
X <- umap_dat[umap_dat$group == x,]
print(x)
# for dimensions to range 0-1
X$X1 <- (X$X1 + abs(X$X1)) / max((X$X1 + abs(X$X1)))
X$X2 <- (X$X2 + abs(X$X2)) / max((X$X2 + abs(X$X2)))
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim$group <- x
return(sp_sim)
})
x = "4"
X <- umap_dat[umap_dat$group == x,]
print(x)
# for dimensions to range 0-1
X$X1 <- (X$X1 + abs(X$X1)) / max((X$X1 + abs(X$X1)))
X$X2 <- (X$X2 + abs(X$X2)) / max((X$X2 + abs(X$X2)))
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
X$indiv
table(X$indiv)
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 5, pb = FALSE)
X <- umap_dat[umap_dat$group == x,]
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 5, pb = FALSE)
sp_sims_l <- pbapply::pblapply(unique(umap_dat$group), function(x){
X <- umap_dat[umap_dat$group == x,]
print(x)
# for dimensions to range 0-1
# X$X1 <- (X$X1 + abs(X$X1)) / max((X$X1 + abs(X$X1)))
# X$X2 <- (X$X2 + abs(X$X2)) / max((X$X2 + abs(X$X2)))
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 5, pb = FALSE)
sp_sim$group <- x
return(sp_sim)
})
sp_sims_l <- pbapply::pblapply(unique(umap_dat$group), function(x){
X <- umap_dat[umap_dat$group == x,]
# print(x)
# for dimensions to range 0-1
# X$X1 <- (X$X1 + abs(X$X1)) / max((X$X1 + abs(X$X1)))
# X$X2 <- (X$X2 + abs(X$X2)) / max((X$X2 + abs(X$X2)))
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim$group <- x
return(sp_sim)
})
sp_sims <- do.call(rbind, sp_sims_l)
hist(sp_sims$mean.overlap)
hist(log(sp_sims$mean.overlap))
hist(sp_sims$mean.overlap)
hist(sp_sims$mean.overlap)
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)
sp_sim$mean.distance <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)$mean.distance
sp_sim
sp_sims_l <- pbapply::pblapply(unique(umap_dat$group), function(x){
X <- umap_dat[umap_dat$group == x,]
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim <- sp_sim[, c("group.1", "group.2", "mean.overlap")]
sp_sim$mean.distance <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)$mean.distance
sp_sim$group <- x
return(sp_sim)
})
umap_dat <- data.frame(group = umap_acous$org.data$group, type = umap_acous$org.data$experiment, indiv = umap_acous$org.data$indiv, umap_acous$layout)
sp_sims_l <- pbapply::pblapply(unique(umap_dat$group), function(x){
X <- umap_dat[umap_dat$group == x,]
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim <- sp_sim[, c("group.1", "group.2", "mean.overlap")]
sp_sim$mean.distance <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)$mean.distance
sp_sim$group <- x
sp_sim$type <- X$type[1]
return(sp_sim)
})
hist(sp_sims$mean.overlap)
hist(sp_sims$mean.distance)
sp_sims <- do.call(rbind, sp_sims_l)
hist(sp_sims$mean.overlap)
hist(sp_sims$mean.distance)
hist(sp_sims$mean.overlap)
hist(sp_sims$mean.distance)
head(sp_sims)
acous_param
View(acous_param[acous_param$indiv == "acous_param",])
View(acous_param[acous_param$indiv == "900200000279820",])
unique(acous_param$group[acous_param$indiv == "900200000279820"])
length(unique(acous_param$indiv))
unique(acous_param$indiv)
length(unique(acous_param$indiv))
acous_param$indiv.group <- paste(acous_param$indiv, acous_param$group, sep = "-")
length(unique(acous_param$indiv))
sapply(unique(acous_param$indiv), function(x) acous_param$indiv.group[acous_param$indiv == x][1])
nrow(acous_param)
length(unique(acous_param$indiv))
# choose one set of calls per individual
acous_param <- acous_param[acous_param$indiv.group %in% sapply(unique(acous_param$indiv), function(x) acous_param$indiv.group[acous_param$indiv == x][1]), ]
nrow(acous_param)
length(unique(acous_param$indiv))
umap_acous <- umap(acous_param[ , 3:222])
umap_acous$org.data <- acous_param
umap_dat <- data.frame(group = umap_acous$org.data$group, type = umap_acous$org.data$experiment, indiv = umap_acous$org.data$indiv, umap_acous$layout)
sp_sims_l <- pbapply::pblapply(unique(umap_dat$group), function(x){
X <- umap_dat[umap_dat$group == x,]
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim <- sp_sim[, c("group.1", "group.2", "mean.overlap")]
sp_sim$mean.distance <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)$mean.distance
sp_sim$group <- x
sp_sim$type <- X$type[1]
return(sp_sim)
})
x <- names(sub_acous_param_l)[1]
x
indivs <- unique(sub_acous_param_l[[x]]$indiv)
indivs
indivs <- unique(sub_acous_param_l[[x]]$indiv[sub_acous_param_l[[x]]$experiment != "vuelo solo"])
indivs
indivs <- unique(sub_acous_param_l[[x]]$indiv[sub_acous_param_l[[x]]$experiment == "vuelo solo"])
indivs
X <- umap_dat[umap_dat$indiv %in% indivs, ]
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim <- sp_sim[, c("group.1", "group.2", "mean.overlap")]
sp_sim$mean.distance <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)$mean.distance
sp_sim$group <- x
sp_sim$type <- X$type[1]
sp_sim$type <- sub_acous_param_l[[x]]$type[1]
sp_sim
sp_sim$type <- sub_acous_param_l[[x]]$type[1]
sp_sim
sub_acous_param_l[[x]]$experiment
grep("gr",sub_acous_param_l[[x]]$experiment, value = TRUE)[1]
sp_sim$type <- grep("gr",sub_acous_param_l[[x]]$experiment, value = TRUE)[1]
sp_sim
sp_sims_l <- pbapply::pblapply(names(sub_acous_param_l), function(x){
indivs <- unique(sub_acous_param_l[[x]]$indiv[sub_acous_param_l[[x]]$experiment == "vuelo solo"])
X <- umap_dat[umap_dat$indiv %in% indivs, ]
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim <- sp_sim[, c("group.1", "group.2", "mean.overlap")]
sp_sim$mean.distance <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)$mean.distance
sp_sim$group <- x
sp_sim$type <- grep("gr",sub_acous_param_l[[x]]$experiment, value = TRUE)[1]
names(sp_sim)[1:2] <- c("indiv.1", "indiv.2")
return(sp_sim)
})
hist(sp_sims$mean.overlap)
hist(sp_sims$mean.distance)
head(sp_sims)
hist(log(sp_sims$mean.distance))
write.csv(sp_sims, "./data/processed/acoustic_similarity_between_individuals_by_group.csv", row.names = FALSE)
sp_sims <- do.call(rbind, sp_sims_l)
head(sp_sims)
hist(log(sp_sims$mean.distance))
write.csv(sp_sims, "./data/processed/acoustic_similarity_between_individuals_by_group.csv", row.names = FALSE)
hist(sp_sims$mean.overlap)
cor(sp_sims$mean.overlap, sp_sims$mean.distance)
plot(sp_sims$mean.overlap, sp_sims$mean.distance)
boxplot(mean.distance ~ type, data = sp_sims)
boxplot(mean.overlap ~ type, data = sp_sims)
sp_sims_l <- pbapply::pblapply(names(sub_acous_param_l), function(x){
indivs <- unique(sub_acous_param_l[[x]]$indiv[sub_acous_param_l[[x]]$experiment == "vuelo solo"])
X <- umap_dat[umap_dat$indiv %in% indivs, ]
sp_sim <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "mean.density.overlap", n = 10, iterations = 50, pb = FALSE)
sp_sim <- sp_sim[, c("group.1", "group.2", "mean.overlap")]
sp_sim$mean.distance <- rarefact_space_similarity(X = X, dimensions = c("X1", "X2"), group = "indiv", parallel = 10, type = "centroid.distance", n = 10, iterations = 50, pb = FALSE)$mean.distance
sp_sim$group <- x
sp_sim$type <- grep("gr",sub_acous_param_l[[x]]$experiment, value = TRUE)[1]
names(sp_sim)[1:2] <- c("indiv.1", "indiv.2")
sp_sim$size <- length(indivs)
return(sp_sim)
})
sp_sims <- do.call(rbind, sp_sims_l)
write.csv(sp_sims, "./data/processed/acoustic_similarity_between_individuals_by_group.csv", row.names = FALSE)
boxplot(mean.overlap ~ type + size, data = sp_sims)
table(sp_sims$type)
sp_sims$type <- ifelse(sp_sims$type == "vuelo grupos mixtos", "Artificial", "Regular")
write.csv(sp_sims, "./data/processed/acoustic_similarity_between_individuals_by_group.csv", row.names = FALSE)
boxplot(mean.overlap ~ type + size, data = sp_sims)
sp_sims <- do.call(rbind, sp_sims_l)
sp_sims$experiment.type <- ifelse(sp_sims$type == "vuelo grupos mixtos", "Artificial", "Regular")
names(sp_sims)
names(sp_sims)[7] <- "group.size"
write.csv(sp_sims, "./data/processed/acoustic_similarity_between_individuals_by_group.csv", row.names = FALSE)
mod <- brm(
formula = mean.overlap ~ experiment.type + experiment.type:group.size + (1 | group),
iter = iter,
thin = 1,
data = call_rate_indiv,
family = gaussian(),
silent = 2,
chains = chains,
cores = chains,
prior = priors,
file = "./data/processed/acoustic_similarity_between_individuals_by_group"
)
mod <- brm(
formula = mean.overlap ~ experiment.type + experiment.type:group.size + (1 | group),
iter = iter,
thin = 1,
data = sp_sims,
family = gaussian(),
silent = 2,
chains = chains,
cores = chains,
prior = priors,
file = "./data/processed/acoustic_similarity_between_individuals_by_group"
)
ggplot(sp_sims, aes(y = mean.overlap, x = experiment.type)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
labs(x="Flight", y="Call rate (calls/min)"
) +
ylim(c(-1.5, 30)) +
# geom_text(data = agg_dat, aes(y = rep(-1.5, nrow(agg_dat)), x = type_f, label = n.labels), nudge_x = 0, size = 6) +
theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
facet_grid( ~ group.size)
ggplot(sp_sims, aes(y = mean.overlap, x = experiment.type)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
labs(x="Flight", y="Call rate (calls/min)"
) +
ylim(c(-1.5, 30)) +
# geom_text(data = agg_dat, aes(y = rep(-1.5, nrow(agg_dat)), x = type_f, label = n.labels), nudge_x = 0, size = 6) +
theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
facet_wrap( ~ group.size, scales = "free_y")
ggplot(sp_sims, aes(y = mean.overlap, x = experiment.type)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
labs(x="Flight", y="Call rate (calls/min)"
) +
# ylim(c(-1.5, 30)) +
# geom_text(data = agg_dat, aes(y = rep(-1.5, nrow(agg_dat)), x = type_f, label = n.labels), nudge_x = 0, size = 6) +
theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
facet_wrap( ~ group.size, scales = "free_y")
ggplot(sp_sims, aes(y = mean.overlap, x = experiment.type)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
labs(x="Flight", y="Call rate (calls/min)"
) +
# ylim(c(-1.5, 30)) +
# geom_text(data = agg_dat, aes(y = rep(-1.5, nrow(agg_dat)), x = type_f, label = n.labels), nudge_x = 0, size = 6) +
theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
facet_wrap( ~ group.size)
ggplot(sp_sims, aes(y = mean.overlap, x = experiment.type)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
labs(x="Group flight", y="Acoustic space overlap"
) +
# ylim(c(-1.5, 30)) +
# geom_text(data = agg_dat, aes(y = rep(-1.5, nrow(agg_dat)), x = type_f, label = n.labels), nudge_x = 0, size = 6) +
theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
facet_wrap( ~ group.size)
sp_sims$experiment.type <- factor(ifelse(sp_sims$experiment.type == "Regular", "Regular", "Artificial"), levels = c("Regular", "Artificial"))
ggplot(sp_sims, aes(y = mean.overlap, x = experiment.type)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
labs(x="Group flight", y="Acoustic space overlap"
) +
# ylim(c(-1.5, 30)) +
# geom_text(data = agg_dat, aes(y = rep(-1.5, nrow(agg_dat)), x = type_f, label = n.labels), nudge_x = 0, size = 6) +
theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
facet_wrap( ~ group.size)
extended_summary(read.file = "./data/processed/acoustic_similarity_between_individuals_by_group.rds", remove.intercepts = TRUE, highlight = TRUE, print.name = FALSE)
extended_summary(read.file = "./data/processed/acoustic_similarity_between_individuals_by_group.rds", gsub.pattern = "b_experiment.type", gsub.replacement = "", remove.intercepts = TRUE, highlight = TRUE, print.name = FALSE)

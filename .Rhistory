sim_group$group <- paste(names(g_size)[x], y, sep = "-")
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
# remove those with duplicated individuals
sub_sim_groups_l <- sub_sim_groups_l[sapply(sub_sim_groups_l, function(x)
length(unique(x$Individuo)) == nrow(x))]
sub_sim_groups <- do.call(rbind, sub_sim_groups_l)
# bind excluding first individual
out <-
rbind(sub_sim_groups, group_dat[group_dat$group.size %in% 2:5 &
group_dat$entry.time.diff > 0.001,])
return(out)
})
sub_sim_groups_l <- sub_sim_groups_l[which(sapply(sim_groups_l, class) == "data.frame")]
table(sim_groups_l[[4]]$type)
sim_group_n <-
sapply(sim_groups_l, function(x)
length(unique(x$group[x$type == "Simulated"])))
group_dat <-
dat[!is.infinite(dat$entry.time) &
!is.na(dat$entry.time) & dat$type != "Individual",]
# get difference to first entry
group_dat_l <- lapply(unique(group_dat$group), function(x) {
# print(x)
X <- group_dat[group_dat$group == x,]
X <- X[!is.na(X$entry.time), ]
X <- X[order(X$entry.time), ]
# X$entry.time.diff <- X$entry.time - min(X$entry.time)
X$entry.time.diff <- c(NA, X$entry.time[-1] - X$entry.time[-nrow(X)])
X <- X[!is.na(X$entry.time.diff), ]
X$group.size <- if (nrow(X) > 0)
nrow(X) + 1
else
vector()
return(X)
})
group_dat <- do.call(rbind, group_dat_l)
group_dat$type <-
factor(group_dat$type, levels = c("Artificial", "Natural", "Simulated"))
# make random groups from individual flights
indiv_dat <-
dat[!is.infinite(dat$entry.time) &
!is.na(dat$entry.time) & dat$type == "Individual",]
indivs <- unique(indiv_dat$Individuo)
group_sizes <- group_dat$group.size[!duplicated(group_dat$Video)]
# use only group sizes 2:5
group_sizes <- group_sizes[group_sizes <= 5]
table(group_sizes)
x = 1
# randomize order of distribution of individuals per experiment
set.seed(x)
g_size <- sample((group_sizes))
sampled_indivs <- sample(indivs, sum(g_size), replace = TRUE)
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
g_size
indivs_split <-
split(sampled_indivs, f = unlist(sapply(seq_along(g_size), function(x)
rep(names(g_size)[x], g_size[x]))))
indivs_split
sapply(indivs_split, length)
sapply(indivs_split, length) |> table()
y = 1
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group
indiv_dat$Individuo %in% indivs_split[[y]]
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
names(g_size)
sim_group$group <- names(g_size)[y]
sim_group$group
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group$group <- names(g_size)[y]
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
sub_sim_groups_l
indivs_split
sapply(anyDuplicated, indivs_split)
sapply(indivs_split, anyDuplicated)
indivs_split$`sim-1-19`
sampled_indivs
g_size
lapply(g_size, function(w) sample(indivs, w))
# randomize order of distribution of individuals per experiment
set.seed(x)
g_size <- sample((group_sizes))
# randomize order of distribution of individuals per experiment
g_size <- sample((group_sizes))
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
set.seed(x)
indivs_split <- lapply(g_size, function(w) sample(indivs, w))
# remove those with duplicated individuals
sub_sim_groups_l <- sub_sim_groups_l[sapply(sub_sim_groups_l, function(x)
length(unique(x$Individuo)) == nrow(x))]
sub_sim_groups_l
# remove those with duplicated individuals
sub_sim_groups_l <- sub_sim_groups_l[sapply(sub_sim_groups_l, function(x)
length(unique(x$Individuo)) == nrow(x))]
indivs_split <- lapply(g_size, function(w) sample(indivs, w))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group$group <- names(g_size)[y]
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
sub_sim_groups <- do.call(rbind, sub_sim_groups_l)
sub_sim_groups
sapply(anyDuplicated, sub_sim_groups_l)
sapply(sub_sim_groups_l, anyDuplicated)
sapply(sub_sim_groups_l, anyDuplicated) |> length()
indivs_split
# randomize order of distribution of individuals per experiment
g_size <- sample((group_sizes))
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
set.seed(x)
indivs_split <- lapply(g_size, function(w) sample(indivs, w))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group$group <- names(g_size)[y]
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
sub_sim_groups <- do.call(rbind, sub_sim_groups_l)
# bind excluding first individual
out <-
rbind(sub_sim_groups, group_dat[group_dat$group.size %in% 2:5 &
group_dat$entry.time.diff > 0.001,])
out
# simulate group entries
sim_groups_l <- pblapply(1:30, cl = 10, function(x) {
# randomize order of distribution of individuals per experiment
g_size <- sample((group_sizes))
# sampled_indivs <- sample(indivs, sum(g_size), replace = TRUE)
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
# indivs_split <-
#   split(sampled_indivs, f = unlist(sapply(seq_along(g_size), function(x)
#     rep(names(g_size)[x], g_size[x]))))
set.seed(x)
indivs_split <- lapply(g_size, function(w) sample(indivs, w))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group$group <- names(g_size)[y]
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
sub_sim_groups <- do.call(rbind, sub_sim_groups_l)
# bind excluding first individual
out <-
rbind(sub_sim_groups, group_dat[group_dat$group.size %in% 2:5 &
group_dat$entry.time.diff > 0.001,])
return(out)
})
sub_sim_groups_l <- sub_sim_groups_l[which(sapply(sim_groups_l, class) == "data.frame")]
table(sim_groups_l[[4]]$type)
group_sizes
# randomize order of distribution of individuals per experiment
set.seed(x)
g_size <- sample((group_sizes))
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
group_sizes
length(group_sizes)
73/27
table(sim_groups_l[[1]]$type)
table(sim_groups_l[[2]]$type)
sim_groups_l[[2]]
table(sim_groups_l[[2]]$type)
sub_sim_groups
table(sub_sim_groups$group)
group_sizes
# simulate group entries
sim_groups_l <- pblapply(1:30, cl = 10, function(x) {
# randomize order of distribution of individuals per experiment
set.seed(x)
g_size <- sample((group_sizes), length(group_sizes) / 2)
# sampled_indivs <- sample(indivs, sum(g_size), replace = TRUE)
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
# indivs_split <-
#   split(sampled_indivs, f = unlist(sapply(seq_along(g_size), function(x)
#     rep(names(g_size)[x], g_size[x]))))
set.seed(x)
indivs_split <- lapply(g_size, function(w) sample(indivs, w))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group$group <- names(g_size)[y]
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
sub_sim_groups <- do.call(rbind, sub_sim_groups_l)
# bind excluding first individual
out <-
rbind(sub_sim_groups, group_dat[group_dat$group.size %in% 2:5 &
group_dat$entry.time.diff > 0.001,])
return(out)
})
sub_sim_groups_l <- sub_sim_groups_l[which(sapply(sim_groups_l, class) == "data.frame")]
table(sim_groups_l[[2]]$type)
# simulate group entries
sim_groups_l <- pblapply(1:30, cl = 10, function(x) {
# randomize order of distribution of individuals per experiment
set.seed(x)
g_size <- sample((group_sizes), length(group_sizes) / 2)
# sampled_indivs <- sample(indivs, sum(g_size), replace = TRUE)
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
# indivs_split <-
#   split(sampled_indivs, f = unlist(sapply(seq_along(g_size), function(x)
#     rep(names(g_size)[x], g_size[x]))))
set.seed(x)
indivs_split <- lapply(g_size, function(w) sample(indivs, w))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group$group <- names(g_size)[y]
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
sub_sim_groups <- do.call(rbind, sub_sim_groups_l)
# bind excluding first individual
out <-
rbind(sub_sim_groups, group_dat[group_dat$group.size %in% 2:5 &
group_dat$entry.time.diff > 0.001,])
return(out)
})
sub_sim_groups_l <- sub_sim_groups_l[which(sapply(sim_groups_l, class) == "data.frame")]
table(sim_groups_l[[2]]$type)
table(sim_groups_l[[1]]$type)
group_dat <-
dat[!is.infinite(dat$entry.time) &
!is.na(dat$entry.time) & dat$type != "Individual",]
# get difference to first entry
group_dat_l <- lapply(unique(group_dat$group), function(x) {
# print(x)
X <- group_dat[group_dat$group == x,]
X <- X[!is.na(X$entry.time), ]
X <- X[order(X$entry.time), ]
# X$entry.time.diff <- X$entry.time - min(X$entry.time)
X$entry.time.diff <- c(NA, X$entry.time[-1] - X$entry.time[-nrow(X)])
X <- X[!is.na(X$entry.time.diff), ]
X$group.size <- if (nrow(X) > 0)
nrow(X) + 1
else
vector()
return(X)
})
group_dat <- do.call(rbind, group_dat_l)
group_dat$type <-
factor(group_dat$type, levels = c("Artificial", "Natural", "Simulated"))
# make random groups from individual flights
indiv_dat <-
dat[!is.infinite(dat$entry.time) &
!is.na(dat$entry.time) & dat$type == "Individual",]
indivs <- unique(indiv_dat$Individuo)
group_sizes <- group_dat$group.size[!duplicated(group_dat$Video)]
# use only group sizes 2:5
group_sizes <- group_sizes[group_sizes <= 5]
table(group_sizes)
# simulate group entries
sim_groups_l <- pblapply(1:30, cl = 10, function(x) {
# randomize order of distribution of individuals per experiment
set.seed(x)
g_size <- sample((group_sizes), length(group_sizes) / 2)
# sampled_indivs <- sample(indivs, sum(g_size), replace = TRUE)
names(g_size) <- paste("sim", x, 1:length(g_size), sep = "-")
# indivs_split <-
#   split(sampled_indivs, f = unlist(sapply(seq_along(g_size), function(x)
#     rep(names(g_size)[x], g_size[x]))))
set.seed(x)
indivs_split <- lapply(g_size, function(w) sample(indivs, w))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]],]
sim_group$group <- names(g_size)[y]
sim_group <- sim_group[!is.na(sim_group$entry.time), ]
sim_group <- sim_group[order(sim_group$entry.time), ]
# sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group$entry.time.diff <- c(NA, sim_group$entry.time[-1] - sim_group$entry.time[-nrow(sim_group)])
sim_group <- sim_group[!is.na(sim_group$entry.time.diff), ]
sim_group$entry.time.diff[sim_group$entry.time.diff > 300] <- 300
# sim_group$entry.time.diff <-
#   sim_group$entry.time - min(sim_group$entry.time)
# sim_group <- sim_group[-which.min(sim_group$entry.time.diff),]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
return(sim_group)
})
sub_sim_groups <- do.call(rbind, sub_sim_groups_l)
# bind excluding first individual
out <-
rbind(sub_sim_groups, group_dat[group_dat$group.size %in% 2:5 &
group_dat$entry.time.diff > 0.001,])
return(out)
})
sub_sim_groups_l <- sub_sim_groups_l[which(sapply(sim_groups_l, class) == "data.frame")]
sim_group_n <-
sapply(sim_groups_l, function(x)
length(unique(x$group[x$type == "Simulated"])))
all(sim_group_n == 4)
sim_group_dat <-
do.call(rbind, lapply(sim_groups_l, function(x)
x[x$type == "Simulated",]))
sim_group_dat <- rbind(sim_group_dat, group_dat)
# also make group.size.factor
sim_groups_l <- lapply(sim_groups_l, function(x) {
x$type <- factor(x$type, levels = c("Natural", "Artificial", "Simulated"))
x$group.size.factor <- factor(x$group.size)
return(x)
})
custom_labels <- unique(sim_groups_l[[3]]$group.size)
custom_labels <- paste("group size = ", custom_labels)
names(custom_labels) <- unique(sim_groups_l[[3]]$group.size)
# raincloud plot:
ggplot(sim_groups_l[[1]],
aes(
y = entry.time.diff,
x = type,
color = type,
fill = type
)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
# fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(# fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
# color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
scale_color_viridis_d(option = "G", end = 0.8) +
scale_fill_viridis_d(option = "G",
end = 0.8,
alpha = 0.6) +
# ylim(c(-0.1, 4.8)) +
scale_x_discrete(labels = c(
"natural" = "Natural",
"artificial" = "Artificial",
"simulated" = "Simulated"
)) +
theme(legend.position = "none") +
labs(x = "Flight type", y = "Time difference (s)")
entry_mod_list <- brm_multiple(
formula = log(entry.time.diff + 1) ~ type + mo(group.size) + (1 | group),
iter = iter,
thin = 1,
data = sim_groups_l,
family = gaussian(),
silent = 2,
chains = chains,
backend = "cmdstanr",
# only works if cmdstanr package is installed
threads = threading(2),
cores = chains,
combine = FALSE,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
custom_ppc(fit = entry_mod_list[[1]], group = "type")
entry_mod_list <- pblapply(entry_mod_list,  function(x) add_criterion(x, criterion = c("loo")))
saveRDS(entry_mod_list,
"./data/processed/model_list_roost_entry_time_regression_monotonic.RDS")
# run null model
null_entry_mod_list <- brm_multiple(
formula = log(entry.time.diff + 1) ~ 1 + (1 | group),
iter = iter,
thin = 1,
data = sim_groups_l,
family = gaussian(),
silent = 2,
chains = chains,
backend = "cmdstanr",
# only works if cmdstanr package is installed
threads = threading(2),
cores = chains,
combine = FALSE,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
null_entry_mod_list <- pblapply(null_entry_mod_list,  function(x) add_criterion(x, criterion = c("loo")))
# loo_compare(entry_mod_list[[1]], null_entry_mod_list[[1]])
saveRDS(null_entry_mod_list,
"./data/processed/null_model_list_roost_entry_time_regression_monotonic.RDS")
beepr::beep(2)
beepr::beep(2)
model_list_roost_entry_time_regression <-
readRDS("./data/processed/model_list_roost_entry_time_regression_monotonic.RDS")
null_model_list_roost_entry_time_regression <-
readRDS("./data/processed/null_model_list_roost_entry_time_regression_monotonic.RDS")
loo_diffs <-
lapply(seq_along(model_list_roost_entry_time_regression), function(x)
loo::loo_compare(model_list_roost_entry_time_regression[[x]], null_model_list_roost_entry_time_regression[[x]])
)
loo_diff <- do.call(rbind, loo_diffs)
rows <- rownames(loo_diff)
loo_diff <- as.data.frame(loo_diff)
loo_diff$model <- rows
aggregate(cbind(elpd_diff, se_diff) ~ model, loo_diff, mean)
# average model
avrg_call <-
paste0("posterior_average(",
paste0(paste0("model_list_roost_entry_time_regression[[", 1:length(model_list_roost_entry_time_regression), "]]"), collapse = ", "),
", weights = 'loo')")
average_model_draws <- eval(parse(text = avrg_call))
draw_extended_summary(average_model_draws,
highlight = TRUE,
fill = fill_color,
beta.prefix = c("^b_", "^bsp_mo"))
contrasts <-
draws_contrasts(
average_model_draws,
predictor_name = "type",
basal_level = "Natural",
fill_color = fill_color
)
contrasts$contrasts
contrasts$plot + theme_classic()

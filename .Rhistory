inq_est <- readRDS("/home/m/sda5/Dropbox/Projects/Ontogenia respuesta Thyroptera/suppl_mat/ext_sel_tab_inquiry.RDS")
# get mean duration one
inq_est <- sig2noise(inq_est, mar = 0.01)
inq_est <- inq_est[inq_est$SNR > quantile(inq_est$SNR, 0.75), ]
inq_est$dur <- inq_est$end - inq_est$start
template <- inq_est[which.min(abs(inq_est$dur - mean(inq_est$dur))),, drop = FALSE]
template <- resample_est(template, samp.rate = 80, bit.depth = 16)
temp_st <- exp_est(template, selection.table = FALSE)
temp_st$type <- "template"
split_sels$type <- NA
split_sels$top.freq <- 35
split_sels$bottom.freq <- 10
temp_st <- temp_st[, names(split_sels)]
split_sels_detec <- rbind(temp_st, split_sels)
comp_mat <- cbind(paste(split_sels_detec$sound.files[1], split_sels_detec$selec[1], sep = "-"), paste(split_sels$sound.files, split_sels$selec, sep = "-"))
sq_rws <- seq(1, nrow(split_sels_detec), by = 4)
sq_rws <- c(sq_rws, nrow(split_sels_detec))
# loop over rows
pks_l <- lapply(2:length(sq_rws), function(x){
# get progress
print(round(x / length(sq_rws), 2))
# cross correlation
xc.output <- xcorr(
X = split_sels_detec[c(1, sq_rws[x - 1]:sq_rws[x] + 1), ], output = "list",
compare.matrix = comp_mat[sq_rws[x - 1]:sq_rws[x], ],
pb = FALSE, bp = "pairwise.freq.range",
path = "/home/m/Documentos/Github_projects/flight_coordination_thyroptera/data/raw/resample_80kHz",
wl = 300, ovlp = 0)
# find peaks
pks <- find_peaks(xc.output = xc.output, pb = FALSE, cutoff = 0.1)
return(pks)
})
# exclude non-detected
pks <- pks[!is.na(pks$start), ]
# get frequency range
fr_pks <- freq_range(X = pks, bp = c(8, 70), fsmooth = 0.001, ovlp = 90,
threshold = 5, img = FALSE)
fr_pks$bottom.freq[is.na(fr_pks$bottom.freq)] <- mean(fr_pks$bottom.freq, na.rm = TRUE)
fr_pks$top.freq[is.na(fr_pks$top.freq)] <- mean(fr_pks$top.freq, na.rm = TRUE)
write.csv(fr_pks, "./data/processed/cross-correlation_detections_inquiry_calls.csv", row.names = FALSE)
# Export raven selection tables
st <- selection_table(whole.recs = TRUE)
st$end <- 0.01
st$bottom.freq <- 10
st$top.freq <- 12
st$channel <- NULL
ad2 <- rbind(as.data.frame(st), fr_pks)
exp_raven(X = ad2, file.name = "./data/processed/cross-correlation_detections_inquiry_calls_Raven_format.txt", sound.file.path =  .Options$warbleR$wav.path)
# plit in segments of 30 s without saving clips
split_sels <- split_wavs(only.sels = TRUE, sgmt.dur = 30)
# relabels sels to make it and regular selection table
split_sels$selec <- 1:nrow(split_sels)
split_sels$sound.files <- split_sels$org.sound.files
split_sels$org.sound.files <- NULL
# do subset
split_sels <- split_sels[1:100, ]
# check
cs <- check_sels(split_sels)
# get template
inq_est <- readRDS("/home/m/sda5/Dropbox/Projects/Ontogenia respuesta Thyroptera/suppl_mat/ext_sel_tab_inquiry.RDS")
# get mean duration one
inq_est <- sig2noise(inq_est, mar = 0.01)
inq_est <- inq_est[inq_est$SNR > quantile(inq_est$SNR, 0.75), ]
inq_est$dur <- inq_est$end - inq_est$start
template <- inq_est[which.min(abs(inq_est$dur - mean(inq_est$dur))),, drop = FALSE]
template <- resample_est(template, samp.rate = 80, bit.depth = 16)
temp_st <- exp_est(template, selection.table = FALSE)
temp_st$type <- "template"
split_sels$type <- NA
split_sels$top.freq <- 35
split_sels$bottom.freq <- 10
temp_st <- temp_st[, names(split_sels)]
split_sels_detec <- rbind(temp_st, split_sels)
comp_mat <- cbind(paste(split_sels_detec$sound.files[1], split_sels_detec$selec[1], sep = "-"), paste(split_sels$sound.files, split_sels$selec, sep = "-"))
sq_rws <- seq(1, nrow(split_sels_detec), by = 4)
# sq_rws <- c(sq_rws, nrow(split_sels_detec))
# loop over rows
pks_l <- lapply(2:length(sq_rws), function(x){
# get progress
print(round(x / length(sq_rws), 2))
# cross correlation
xc.output <- xcorr(
X = split_sels_detec[c(1, sq_rws[x - 1]:sq_rws[x] + 1), ], output = "list",
compare.matrix = comp_mat[sq_rws[x - 1]:sq_rws[x], ],
pb = FALSE, bp = "pairwise.freq.range",
path = "/home/m/Documentos/Github_projects/flight_coordination_thyroptera/data/raw/resample_80kHz",
wl = 300, ovlp = 0)
# find peaks
pks <- find_peaks(xc.output = xc.output, pb = FALSE, cutoff = 0.1)
return(pks)
})
# exclude non-detected
pks <- pks[!is.na(pks$start), ]
# get frequency range
fr_pks <- freq_range(X = pks, bp = c(8, 70), fsmooth = 0.001, ovlp = 90,
threshold = 5, img = FALSE)
fr_pks$bottom.freq[is.na(fr_pks$bottom.freq)] <- mean(fr_pks$bottom.freq, na.rm = TRUE)
fr_pks$top.freq[is.na(fr_pks$top.freq)] <- mean(fr_pks$top.freq, na.rm = TRUE)
write.csv(fr_pks, "./data/processed/cross-correlation_detections_inquiry_calls.csv", row.names = FALSE)
# Export raven selection tables
st <- selection_table(whole.recs = TRUE)
st$end <- 0.01
st$bottom.freq <- 10
st$top.freq <- 12
st$channel <- NULL
ad2 <- rbind(as.data.frame(st), fr_pks)
exp_raven(X = ad2, file.name = "./data/processed/cross-correlation_detections_inquiry_calls_Raven_format.txt", sound.file.path =  .Options$warbleR$wav.path)
sq_rws
# plit in segments of 30 s without saving clips
split_sels <- split_wavs(only.sels = TRUE, sgmt.dur = 30)
# relabels sels to make it and regular selection table
split_sels$selec <- 1:nrow(split_sels)
split_sels$sound.files <- split_sels$org.sound.files
split_sels$org.sound.files <- NULL
# do subset
split_sels <- split_sels[1:100, ]
# check
cs <- check_sels(split_sels)
# get template
inq_est <- readRDS("/home/m/sda5/Dropbox/Projects/Ontogenia respuesta Thyroptera/suppl_mat/ext_sel_tab_inquiry.RDS")
# get mean duration one
inq_est <- sig2noise(inq_est, mar = 0.01)
inq_est <- inq_est[inq_est$SNR > quantile(inq_est$SNR, 0.75), ]
inq_est$dur <- inq_est$end - inq_est$start
template <- inq_est[which.min(abs(inq_est$dur - mean(inq_est$dur))),, drop = FALSE]
template <- resample_est(template, samp.rate = 80, bit.depth = 16)
temp_st <- exp_est(template, selection.table = FALSE)
temp_st$type <- "template"
split_sels$type <- NA
split_sels$top.freq <- 35
split_sels$bottom.freq <- 10
temp_st <- temp_st[, names(split_sels)]
split_sels_detec <- rbind(temp_st, split_sels)
comp_mat <- cbind(paste(split_sels_detec$sound.files[1], split_sels_detec$selec[1], sep = "-"), paste(split_sels$sound.files, split_sels$selec, sep = "-"))
sq_rws <- seq(1, nrow(split_sels), by = 4)
sq_rws <- c(sq_rws, nrow(split_sels))
# loop over rows
pks_l <- lapply(2:length(sq_rws), function(x){
# get progress
print(round(x / length(sq_rws), 2))
# cross correlation
xc.output <- xcorr(
X = split_sels_detec[c(1, sq_rws[x - 1]:sq_rws[x] + 1), ], output = "list",
compare.matrix = comp_mat[sq_rws[x - 1]:sq_rws[x], ],
pb = FALSE, bp = "pairwise.freq.range",
path = "/home/m/Documentos/Github_projects/flight_coordination_thyroptera/data/raw/resample_80kHz",
wl = 300, ovlp = 0)
# find peaks
pks <- find_peaks(xc.output = xc.output, pb = FALSE, cutoff = 0.1)
return(pks)
})
# exclude non-detected
pks <- pks[!is.na(pks$start), ]
# get frequency range
fr_pks <- freq_range(X = pks, bp = c(8, 70), fsmooth = 0.001, ovlp = 90,
threshold = 5, img = FALSE)
fr_pks$bottom.freq[is.na(fr_pks$bottom.freq)] <- mean(fr_pks$bottom.freq, na.rm = TRUE)
fr_pks$top.freq[is.na(fr_pks$top.freq)] <- mean(fr_pks$top.freq, na.rm = TRUE)
write.csv(fr_pks, "./data/processed/cross-correlation_detections_inquiry_calls.csv", row.names = FALSE)
# Export raven selection tables
st <- selection_table(whole.recs = TRUE)
pks <- do.call(rbind, pks_l)
# exclude non-detected
pks <- pks[!is.na(pks$start), ]
pks
# get frequency range
fr_pks <- freq_range(X = pks, bp = c(8, 70), fsmooth = 0.001, ovlp = 90,
threshold = 5, img = FALSE)
fr_pks$bottom.freq[is.na(fr_pks$bottom.freq)] <- mean(fr_pks$bottom.freq, na.rm = TRUE)
fr_pks$top.freq[is.na(fr_pks$top.freq)] <- mean(fr_pks$top.freq, na.rm = TRUE)
exp_raven(X = fr_pks, file.name = "./data/processed/cross-correlation_detections_inquiry_calls_Raven_format.txt", sound.file.path =  .Options$warbleR$wav.path)
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
warbleR_options(wav.path = "/home/m/Documentos/Github_projects/flight_coordination_thyroptera/data/raw/resample_80kHz", wl = 300, parallel = parallel::detectCores() - 1, bp = "frange", fast = F, threshold = 15, ovlp = 20)
# wav_info()
# plit in segments of 30 s without saving clips
split_sels <- split_wavs(only.sels = TRUE, sgmt.dur = 20)
# relabels sels to make it and regular selection table
split_sels$selec <- 1:nrow(split_sels)
split_sels$sound.files <- split_sels$org.sound.files
split_sels$org.sound.files <- NULL
sub_sls <- split_sels[split_sels$sound.files %in% c("ch1MPI2020-01-15_12-03-59_0000001.wav", "ch1MPI2020-01-15_12-18-06_0000002.wav"), ]
adX <- autodetec(X = sub_sls, threshold = 10, mindur= 0.02, maxdur = 0.07, bp = c(10, 35), img = FALSE, ssmooth = 400, parallel = 3)
# get template
inq_est <- readRDS("/home/m/sda5/Dropbox/Projects/Ontogenia respuesta Thyroptera/suppl_mat/ext_sel_tab_inquiry.RDS")
# get mean duration one
inq_est <- sig2noise(inq_est, mar = 0.01)
inq_est <- inq_est[inq_est$SNR > quantile(inq_est$SNR, 0.75), ]
inq_est$dur <- inq_est$end - inq_est$start
template <- inq_est[which.min(abs(inq_est$dur - mean(inq_est$dur))),, drop = FALSE]
template <- resample_est(template, samp.rate = 80, bit.depth = 16)
temp_st <- exp_est(template, selection.table = FALSE)
temp_st$type <- "template"
split_sels$type <- NA
split_sels$top.freq <- 35
split_sels$bottom.freq <- 10
temp_st <- temp_st[, names(sub_sls)]
sub_slsX <- rbind(temp_st, sub_sls)
comp_mat <- cbind(paste(sub_slsX$sound.files[1], sub_slsX$selec[1], sep = "-"), paste(sub_sls$sound.files, sub_sls$selec, sep = "-"))
temp_st
temp_st$type <- "template"
split_sels$type <- NA
split_sels$top.freq <- 35
split_sels$bottom.freq <- 10
temp_st <- temp_st[, names(sub_sls)]
sub_slsX <- rbind(temp_st, sub_sls)
comp_mat <- cbind(paste(sub_slsX$sound.files[1], sub_slsX$selec[1], sep = "-"), paste(sub_sls$sound.files, sub_sls$selec, sep = "-"))
xc.output <- x_corr(X = sub_slsX, output = "list",
compare.matrix = comp_mat[1:2, ], pb = TRUE, bp = c(12, 35))
xc.output
xc.output <- x_corr(X = sub_slsX, output = "list",
compare.matrix = comp_mat, pb = TRUE, bp = c(12, 35))
# find peaks
pks <- find_peaks(xc.output = xc.output, pb = TRUE)
pks
head(pks)
class(pks)
ViewPks
View(pks)
pks$bottom.freq <- sub_slsX$bottom.freq[1]
pks$top.freq <- sub_slsX$top.freq[1]
exp_raven(X = ad_snrX, file.name = "./data/processed/ad_xcrr_delete.txt", sound.file.path =  .Options$warbleR$wav.path)
exp_raven(X = pks, file.name = "./data/processed/ad_xcrr_delete.txt", sound.file.path =  .Options$warbleR$wav.path)
sub_slsX$sound.files[1] <- "ch1MPI2020-01-15_12-03-59_0000001.wav"
sub_slsX$top.frequency[1] <- 153.954
sub_slsX$top.freq[1] <- 153.954
sub_slsX$top.freq
sub_slsX$sound.files[1] <- "ch1MPI2020-01-15_12-03-59_0000001.wav"
sub_slsX$start[1] <- 153.954
sub_slsX$end[1] <- 154.007
sub_slsX$top.freq[1] <- 37735.8
sub_slsX$bottom.freq[1] <- 15345.9
comp_mat <- cbind(paste(sub_slsX$sound.files[1], sub_slsX$selec[1], sep = "-"), paste(sub_sls$sound.files, sub_sls$selec, sep = "-"))
sub_slsX
xc.output <- x_corr(X = sub_slsX, output = "list",
compare.matrix = comp_mat, pb = TRUE, bp = c(12, 35))
# find peaks
pks <- find_peaks(xc.output = xc.output, pb = TRUE)
pks$bottom.freq <- sub_slsX$bottom.freq[1]
pks$top.freq <- sub_slsX$top.freq[1]
exp_raven(X = pks, file.name = "./data/processed/ad_xcrr_delete.txt", sound.file.path =  .Options$warbleR$wav.path)
sub_slsX$top.freq[1] <- 37.7358
sub_slsX$bottom.freq[1] <- 15.3459
comp_mat <- cbind(paste(sub_slsX$sound.files[1], sub_slsX$selec[1], sep = "-"), paste(sub_sls$sound.files, sub_sls$selec, sep = "-"))
xc.output <- x_corr(X = sub_slsX, output = "list",
compare.matrix = comp_mat, pb = TRUE, bp = c(12, 35))
# find peaks
pks <- find_peaks(xc.output = xc.output, pb = TRUE)
pks$bottom.freq <- sub_slsX$bottom.freq[1]
pks$top.freq <- sub_slsX$top.freq[1]
exp_raven(X = pks, file.name = "./data/processed/ad_xcrr_delete.txt", sound.file.path =  .Options$warbleR$wav.path)
comp_mat
head(comp_mat)
comp_mat[1, ]
comp_mat2 <- comp_mat[1, ]
comp_mat2
comp_mat2 <- comp_mat[1, , drop = FALSE]
comp_mat2
comp_mat2[, 2] <- "ch1MPI2020-01-15_12-03-59_0000001.wav"
xc.output2 <- x_corr(X = sub_slsX, output = "list",
compare.matrix = comp_mat2, pb = TRUE, bp = c(12, 35))
sub_slsX
saveRDS(list(sub_slsX = sub_slsX, comp_mat2 = comp_mat2), "~/Downloads/delete.RDS")
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
packrat::snapshot()
install.packages("RJSONIO")
install.packages("RJSONIO")
setwd("/media/m/Seagate Expansion Drive/Proyecto MPI/Enero 2020/audios")
#
fix_wavs(samp.rate = 90, bit.depth = 16, sox = TRUE)
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", " duncantl/RJSONIO", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "duncantl/RJSONIO", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
packrat::init()
packrat::init()
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "duncantl/RJSONIO", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
install.packages("RJSONIO")
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
install.packages("RJSONIO")
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "RJSONIO", "rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
packrat::init()
packrat::install_local("rfigshare")
packrat::install("rfigshare")
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "duncantl/RJSONIO", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "RJSONIO", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
setwd("/media/m/Seagate Expansion Drive/Proyecto MPI/Enero 2020/audios")
fix_wavs(samp.rate = 90, bit.depth = 16, sox = TRUE)
setwd("/media/m/Seagate Expansion Drive/Proyecto MPI/Enero 2020/audios")
fix_wavs(samp.rate = 90, bit.depth = 16, sox = TRUE)
warbleR_options(reset = T)
setwd("/media/m/Seagate Expansion Drive/Proyecto MPI/Enero 2020/audios")
fix_wavs(samp.rate = 90, bit.depth = 16, sox = TRUE)
setwd("/media/m/Seagate Expansion Drive/Proyecto MPI/Enero 2020/audios")
setwd("/media/m/Seagate Expansion Drive/Proyecto MPI/Enero_2020/audios")
fix_wavs(samp.rate = 90, bit.depth = 16, sox = TRUE)
setwd("~/Documentos/Github_projects/flight_coordination_thyroptera")
# unset github credentials
Sys.unsetenv("GITHUB_PAT")
#clean session
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
## add 'developer/' to packages to be installed from github
x <- c("devtools", "maRce10/warbleR", "bioacoustics", "pbapply", "Rraven", "parallel", "viridis", "RJSONIO", "ropensci/rfigshare")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
fix_wavs(samp.rate = 90, bit.depth = 16, sox = TRUE, path = "/media/m/Seagate Expansion Drive/Proyecto MPI/Enero_2020/audios")
setwd("/media/m/Seagate Expansion Drive/Proyecto MPI/Enero_2020/audios")
fix_wavs(samp.rate = 90, bit.depth = 16, sox = TRUE)
samp.rate = 90, bit.depth = 16, sox = TRUE
getwd()

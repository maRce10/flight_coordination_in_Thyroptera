chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
sub_sim_groups_l <- list(sub_sim_groups_l[[1]], sub_sim_groups_l[[1]])
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group),
iter = iter,
thin = 1,
data = sim_groups_l,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
table(sim_groups_l[[1]]$Group)
table(sim_groups_l[[2]]$Group)
sim_groups_l <- list(sim_groups_l[[1]], sim_groups_l[[1]])
table(sim_groups_l[[1]]$Group)
table(sim_groups_l[[2]]$Group)
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group),
iter = iter,
thin = 1,
data = sim_groups_l,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
mod <- combine_models(mlist = mods, check_data = T)
sub_sim_groups_l <-  list()
g_size
n_group
g_size <- g_size[1:n_group]
g_size
sum(g_size)
sampled_indivs <- sample(indivs, sum(g_size))
sampled_indivs
cut(sampled_indivs, breaks = cumsum(g_size))
rep(1:n_group, each = g_size)
sapply(1:n_group, function(x) rep(x, g_size[x]))
unlist(sapply(1:n_group, function(x) rep(x, g_size[x])))
g_size
split(sampled_indivs, f = unlist(sapply(1:n_group, function(x) rep(x, g_size[x]))))
indivs_split <- split(sampled_indivs, f = unlist(sapply(1:n_group, function(x) rep(x, g_size[x]))))
sub_sim_groups_l <- lapply(indivs_split, function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split, ]
sim_group$Group <- paste("sim",x, y, sep = "-")
sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group <- sim_group[-which.min(sim_group$entry.time.diff), ]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
out <- rbind(sim_group, group_dat)
return(out)
}
)
sub_sim_groups_l <- lapply(indivs_split, function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% y, ]
sim_group$Group <- paste("sim",x, y, sep = "-")
sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group <- sim_group[-which.min(sim_group$entry.time.diff), ]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
out <- rbind(sim_group, group_dat)
return(out)
}
)
sub_sim_group <- do.call(rbind, sub_sim_groups_l)
sim_groups_l <- pblapply(1:100, function(x){
g_size <- sample(group_dat$group.size)
n_group <- sum(cumsum(g_size) <= length(indivs))
g_size <- g_size[1:n_group]
sampled_indivs <- sample(indivs, sum(g_size))
indivs_split <- split(sampled_indivs, f = unlist(sapply(1:n_group, function(x) rep(x, g_size[x]))))
sub_sim_groups_l <- lapply(indivs_split, function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% y, ]
sim_group$Group <- paste("sim",x, y, sep = "-")
sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group <- sim_group[-which.min(sim_group$entry.time.diff), ]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
out <- rbind(sim_group, group_dat)
return(out)
}
)
sub_sim_group <- do.call(rbind, sub_sim_groups_l)
return(sub_sim_group)
})
x <- sim_groups_l[[1]]
x
sapply(sim_groups_l, function(x) length(unique(x$Group[x$type == "Simulated"])))
sim_group_n <- sapply(sim_groups_l, function(x) length(unique(x$Group[x$type == "Simulated"])))
table(sim_group_n)
x$Group[x$type == "Simulated"]
sim_groups_l <- pblapply(1:100, function(x){
g_size <- sample(group_dat$group.size)
n_group <- sum(cumsum(g_size) <= length(indivs))
g_size <- g_size[1:n_group]
sampled_indivs <- sample(indivs, sum(g_size))
indivs_split <- split(sampled_indivs, f = unlist(sapply(1:n_group, function(x) rep(x, g_size[x]))))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]], ]
sim_group$Group <- paste("sim",x, y, sep = "-")
sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group <- sim_group[-which.min(sim_group$entry.time.diff), ]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
out <- rbind(sim_group, group_dat)
return(out)
}
)
sub_sim_group <- do.call(rbind, sub_sim_groups_l)
return(sub_sim_group)
})
sim_group_n <- sapply(sim_groups_l, function(x) length(unique(x$Group[x$type == "Simulated"])))
table(sim_group_n)
sim_groups_l <- pblapply(1:1000, function(x){
g_size <- sample(group_dat$group.size)
n_group <- sum(cumsum(g_size) <= length(indivs))
g_size <- g_size[1:n_group]
sampled_indivs <- sample(indivs, sum(g_size))
indivs_split <- split(sampled_indivs, f = unlist(sapply(1:n_group, function(x) rep(x, g_size[x]))))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]], ]
sim_group$Group <- paste("sim",x, y, sep = "-")
sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group <- sim_group[-which.min(sim_group$entry.time.diff), ]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
out <- rbind(sim_group, group_dat)
return(out)
}
)
sub_sim_group <- do.call(rbind, sub_sim_groups_l)
return(sub_sim_group)
})
sim_group_n <- sapply(sim_groups_l, function(x) length(unique(x$Group[x$type == "Simulated"])))
table(sim_group_n)
sim_group_n
which(sim_group_n == 5)
# keep those with same number of simulated groups
sim_groups_l <- sim_groups_l[which(sim_group_n == 5)]
sim_group_dat <- do.call(rbind, lapply(sim_groups_l, function(x) x[x$type == "Simulated", ]))
sim_group_dat <- rbind(sim_group_dat, group_dat)
# individual plot solo vs individual in group
ggplot(sim_group_dat, aes(x = type, y = log(entry.time.diff))) +
geom_boxplot() +
# geom_point(size = 2) +
# scale_color_viridis_c(alpha = 0.8) +
labs(x = "Flight", y = "log(time after first entry (s))") +
# facet_grid( ~ experiment_f) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group),
iter = iter,
thin = 1,
data = sim_groups_l[1:2],
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
sim_groups_l[[1]]
mods[[1]]
mods[[1]]$fit
Y <- x[x$type == "Simulated", ]
Y
x <- sim_groups_l[[1]]
Y <- x[x$type == "Simulated", ]
Y
as.numeric(as.factor(Y$Group))
Y <- rbind(Y, x[x$type != "Simulated", ])
sim_groups_l <- lapply(sim_groups_l, function(x){
Y <- x[x$type == "Simulated", ]
Y$Group <- as.numeric(as.factor(Y$Group))
Y <- rbind(Y, x[x$type != "Simulated", ])
return(Y)
})
sim_group_dat <- do.call(rbind, lapply(sim_groups_l, function(x) x[x$type == "Simulated", ]))
sim_group_dat <- rbind(sim_group_dat, group_dat)
# individual plot solo vs individual in group
ggplot(sim_group_dat, aes(x = type, y = log(entry.time.diff))) +
geom_boxplot() +
# geom_point(size = 2) +
# scale_color_viridis_c(alpha = 0.8) +
labs(x = "Flight", y = "log(time after first entry (s))") +
# facet_grid( ~ experiment_f) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group),
iter = iter,
thin = 1,
data = sim_groups_l[1:2],
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
mod
length(sim_groups_l)
# keep only 30
sim_groups_l <- sim_groups_l[1:30]
sim_group_dat <- do.call(rbind, lapply(sim_groups_l, function(x) x[x$type == "Simulated", ]))
sim_group_dat <- rbind(sim_group_dat, group_dat)
# individual plot solo vs individual in group
ggplot(sim_group_dat, aes(x = type, y = log(entry.time.diff))) +
geom_boxplot() +
# geom_point(size = 2) +
# scale_color_viridis_c(alpha = 0.8) +
labs(x = "Flight", y = "log(time after first entry (s))") +
# facet_grid( ~ experiment_f) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
saveRDS(sim_groups_l, "./data/processed/simulated_data_entry_time.RDS")
sim_groups_l <- readRDS("./data/processed/simulated_data_entry_time.RDS")
sim_groups_l <- readRDS("./data/processed/simulated_data_entry_time.RDS")
chains <- 1
iter <- 5000
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group),
iter = iter,
thin = 1,
data = sim_groups_l,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
mod
mod <- combine_models(mlist = mods, check_data = T)
chains <- 1
iter <- 7000
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group),
iter = iter,
thin = 1,
data = sim_groups_l,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
mod
iter <- 10000
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group),
iter = iter,
thin = 1,
data = sim_groups_l,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
group_dat <- dat[!is.infinite(dat$entry.time) & !is.na(dat$entry.time) & dat$`Tipo grupo` != "Individual", ]
# get difference to first entry
group_dat_l <- lapply(unique(group_dat$Grupo), function(x){
# print(x)
X <- group_dat[group_dat$Grupo == x, ]
X$entry.time.diff <- X$entry.time - min(X$entry.time)
X <- X[-which.min(X$entry.time.diff), ]
X$group.size <- if (nrow(X) > 0) nrow(X) + 1 else vector()
return(X)
})
group_dat <- do.call(rbind, group_dat_l)
group_dat$Group <- group_dat$Grupo
group_dat$entry.time.diff[group_dat$entry.time.diff == 0] <- 0.001
group_dat$type <- factor(ifelse(group_dat$`Tipo grupo` == "Mixto", "Artificial", "Real"), levels = c("Simulated", "Artificial", "Real"))
# make random groups from individual flights
indiv_dat <- dat[!is.infinite(dat$entry.time) & !is.na(dat$entry.time) & dat$`Tipo grupo` == "Individual", ]
indivs <- unique(indiv_dat$Individuo)
sim_groups_l <- pblapply(1:1000, function(x){
g_size <- sample(group_dat$group.size)
n_group <- sum(cumsum(g_size) <= length(indivs))
g_size <- g_size[1:n_group]
sampled_indivs <- sample(indivs, sum(g_size))
indivs_split <- split(sampled_indivs, f = unlist(sapply(1:n_group, function(x) rep(x, g_size[x]))))
sub_sim_groups_l <- lapply(1:length(indivs_split), function(y) {
sim_group <- indiv_dat[indiv_dat$Individuo %in% indivs_split[[y]], ]
sim_group$Group <- paste("sim",x, y, sep = "-")
sim_group$entry.time.diff <- sim_group$entry.time - min(sim_group$entry.time)
sim_group <- sim_group[-which.min(sim_group$entry.time.diff), ]
sim_group$group.size <- nrow(sim_group) + 1
sim_group$type <- factor("Simulated")
out <- rbind(sim_group, group_dat)
return(out)
}
)
sub_sim_group <- do.call(rbind, sub_sim_groups_l)
return(sub_sim_group)
})
sim_group_n <- sapply(sim_groups_l, function(x) length(unique(x$Group[x$type == "Simulated"])))
table(sim_group_n)
# keep those with same number of simulated groups
sim_groups_l <- sim_groups_l[which(sim_group_n == 5)]
sim_groups_l <- lapply(sim_groups_l, function(x){
Y <- x[x$type == "Simulated", ]
Y$Group <- as.numeric(as.factor(Y$Group))
Y <- rbind(Y, x[x$type != "Simulated", ])
return(Y)
})
# keep only 30
sim_groups_l <- sim_groups_l[1:30]
sim_group_dat <- do.call(rbind, lapply(sim_groups_l, function(x) x[x$type == "Simulated", ]))
sim_group_dat <- rbind(sim_group_dat, group_dat)
# individual plot solo vs individual in group
ggplot(sim_group_dat, aes(x = type, y = log(entry.time.diff))) +
geom_boxplot() +
# geom_point(size = 2) +
# scale_color_viridis_c(alpha = 0.8) +
labs(x = "Flight", y = "log(time after first entry (s))") +
# facet_grid( ~ experiment_f) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
saveRDS(sim_groups_l, "./data/processed/simulated_data_entry_time.RDS")
chains <- 1
iter <- 10000
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group) + (1 | group.size),
iter = iter,
thin = 1,
data = sim_groups_l[1:2],
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod
mod <- combine_models(mlist = mods, check_data = FALSE)
mod
sim_groups_l <- readRDS("./data/processed/simulated_data_entry_time.RDS")
chains <- 1
iter <- 10000
mods <- brm_multiple(
formula = entry.time.diff ~ type + (1 | Group) + (1 | group.size),
iter = iter,
thin = 1,
data = sim_groups_l,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
combine = FALSE
)
mod <- combine_models(mlist = mods, check_data = FALSE)
saveRDS(brms_models, "./data/processed/simulated_data_entry_time_models.RDS")
saveRDS(combined_mod, "./data/processed/simulated_data_entry_time_models.RDS")
combined_mod <- combine_models(mlist = mods, check_data = FALSE)
saveRDS(combined_mod, "./data/processed/simulated_data_entry_time_models.RDS")
summary_brm_model(combined_mod, gsub.pattern = "experiment.type", gsub.replacement = "solo_vs_")
contrasts <- c(real_vs_artificial = "typeReal - typeArtificial = 0")
hypothesis(combined_mod, contrasts)
combined_mod <- readRDS("./data/processed/roost_entry_coordination_models.RDS")
summary_brm_model(combined_mod)
combined_mod
combined_mod <- combine_models(mlist = mods, check_data = FALSE)
# mean centering
agg_dat$group.size <- agg_dat$group.size - mean(agg_dat$group.size)
chains <- 1
iter <- 10000
agg_dat$entry[agg_dat$entry == "None"] <-  "1_None"
model_formulas <- c("entry ~ type + (1 | Group) + ( 1 | group.size)")
brms_models <- lapply(model_formulas, function(x){
print(x)
mod <- brm(data = agg_dat,
family = categorical,
formula = x,
iter = iter,
chains = chains,
cores = chains
)
try(mod <- add_criterion(mod, c("loo")))
return(mod)
})
names(brms_models) <- model_formulas
saveRDS(brms_models, "./data/processed/roost_entry_models.RDS")
model_formulas
summary_brm_model(brms_models$`entry ~ type + (1 | Group) + ( 1 | group.size)`)
hypothesis(brms_models$`entry ~ type + (1 | Group) + ( 1 | group.size)`, contrasts)
contrasts <- c(one = "muFull_Intercept - muFull_typeReal = 0")
hypothesis(brms_models$`entry ~ type + (1 | Group) + ( 1 | group.size)`, contrasts)
chains <- 1
iter <- 5000
model_formulas <- c("entry.time.diff ~ type + (1 | Group) + (1 | group.size)", "entry.time.diff ~ 1 + (1 | Group) + (1 | group.size)")
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = group_dat,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains
)
mod <- add_criterion(mod, c("loo"))
return(mod)
})
names(brms_models) <- model_formulas
saveRDS(brms_models, "./data/processed/roost_entry_coordination_models.RDS")
# Chunk 1
############
# add file name including path
file.name <- "~/Downloads/Combinaciones grupos.xlsx"
replications <- 10000
#############
fi <- file.info(file.name)
# Chunk 2: packages
## add 'developer/' to packages to be installed from github
x <- c("pbapply", "parallel","readxl", "knitr", "kableExtra")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
df <- read_excel(file.name, col_types = c("text", "text", "text"))
## add 'developer' to packages to be installed from github
x <- c("data.table", "lubridate", "devtools", "maRce10/warbleR", "readxl", "ranger", "caret", "e1071", "pbapply", "viridis", "ggplot2", "DT", "kableExtra", "rlang", "Sim.DiffProc", "soundgen", "brms", "ggrepel", "posterior", "ggridges", "tidybayes", "purrr" #, "markovchain", "igraph", "TraMineR", "spgs"
)
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
warbleR_options(wl = 300, parallel = 1, bp = "frange", fast = TRUE, threshold = 15, ovlp = 20)
opts_knit$set(root.dir = "..")
theme_set(theme_classic(base_size = 24))
# set evaluation false
opts_chunk$set( fig.width = 7, fig.height = 4, warning = FALSE, message = FALSE, tidy = FALSE)
cols <- viridis(10, alpha = 0.7)
# print results brms models
summary_brm_model <- function(x, gsub.pattern = NULL, gsub.replacement = NULL){
summ <- summary(x)$fixed
fit <- x$fit
betas <- grep("^b_", names(fit@sim$samples[[1]]), value = TRUE)
hdis <- t(sapply(betas, function(y)   hdi(fit@sim$samples[[1]][[y]]))
)
summ_table <- data.frame(summ, hdis, iterations = attr(fit, "stan_args")[[1]]$iter, chains = length(attr(fit, "stan_args")))
summ_table <- summ_table[rownames(summ_table) != "Intercept", c("Estimate", "Rhat", "Bulk_ESS", "l.95..CI", "u.95..CI", "iterations", "chains")]
summ_table <- as.data.frame(summ_table)
summ_table$Rhat <- round(summ_table$Rhat, digits = 3)
summ_table$CI_low <- round(unlist(summ_table$l.95..CI), digits = 3)
summ_table$CI_high <- round(unlist(summ_table$u.95..CI), digits = 3)
summ_table$l.95..CI <- summ_table$u.95..CI <- NULL
out <- lapply(betas, function(y)  data.frame(variable = y, value = sort(fit@sim$samples[[1]][[y]], decreasing = FALSE)))
posteriors <- do.call(rbind, out)
posteriors <- posteriors[posteriors$variable != "b_Intercept", ]
if (!is.null(gsub.pattern) & !is.null(gsub.replacement))
posteriors$variable <- gsub(pattern = gsub.pattern, replacement = gsub.replacement, posteriors$variable)
gg <- ggplot(data = posteriors, aes(y = variable, x = value, fill = stat(quantile))) +
geom_density_ridges_gradient(quantile_lines = TRUE, quantile_fun = HDInterval::hdi,  vline_linetype = 2) +
theme_classic() +
xlim(range(c(min(summ_table[ , "CI_low"]), max(summ_table[ , "CI_high"])), 0)) +
geom_vline(xintercept = 0, col = "red") +
scale_fill_manual(values = c("transparent", "lightblue", "transparent"), guide = "none") + ggtitle(x$formula)
if (!is.null(gsub.pattern) & !is.null(gsub.replacement))
rownames(summ_table) <- gsub(pattern = gsub.pattern, replacement = gsub.replacement, rownames(summ_table))
summ_table$Rhat <- ifelse(summ_table$Rhat > 1.05, cell_spec(summ_table$Rhat, "html", color ="white", background = "red", bold = TRUE,  font_size = 12),  cell_spec(summ_table$Rhat, "html"))
signif <- summ_table[,"CI_low"] * summ_table[,"CI_high"] > 0
df1 <- kbl(summ_table, row.names = TRUE, escape = FALSE, format = "html", digits = 3)
df1 <- row_spec(kable_input = df1,row =  which(summ_table$CI_low * summ_table$CI_high > 0), background = adjustcolor(cols[9], alpha.f = 0.3))
df1 <- kable_styling(df1, bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 12)
print(df1)
print(gg)
}
clls <- readRDS("./data/processed/curated_extended_selection_table_inquiry_calls_2020_&_2021.RDS")
View(clls)
length(unique(clls$sound.files))
length(unique(clls$Experimento))
length(unique(clls$event))
length(unique(clls$event[clls$year == 2021]))
length(unique(clls$event[clls$year == 2020]))
(unique(clls$event[clls$year == 2020]))
(unique(clls$event[clls$year == 2021]))
wv2021 <- (unique(clls$event[clls$year == 2021]))
c1 <- clls[!duplicate(clls$event)]
c1 <- clls[!duplicated(clls$event),]
table(c1$Experimento, c1$event)
table(c1$Experimento, c1$year)
62 + 60 + 112
length(unique(clls$event[clls$year == 2020]))
length(unique(clls$event[clls$year == 2021]))
